// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  patient
  doctor
  pharmacy
  admin
}

enum UserStatus {
  pending_verification
  active
  suspended
  pending_approval
}

model User {
  id          String     @id @default(cuid())
  email       String     @unique
  phone       String?    @unique
  role        UserRole
  passwordHash String
  status      UserStatus @default(pending_verification)
  profileRef  String?    // Reference to profile in user-service
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  refreshTokens         RefreshToken[]
  emailVerifications    EmailVerification[]
  passwordResetTokens   PasswordResetToken[]

  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@map("users")
}

model RefreshToken {
  id                String    @id @default(cuid())
  userId            String
  tokenHash         String    @unique
  deviceFingerprint String
  issuedAt          DateTime  @default(now())
  lastUsedAt        DateTime  @default(now())
  expiresAt         DateTime
  revokedAt         DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tokenHash])
  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model EmailVerification {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tokenHash])
  @@index([userId])
  @@index([expiresAt])
  @@map("email_verifications")
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tokenHash])
  @@index([userId])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}